<?php

namespace Acme\UserBundle\Repository;

use Acme\UserBundle\Entity\User;
use Doctrine\DBAL\Connection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * GoalRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{

    public function increaseExp(User $user, $value)
    {
        $this->createQueryBuilder('u')->update()
            ->set('u.exp_total', 'u.exp_total + :exp')
            ->set('u.exp_bill', 'u.exp_bill + :exp')
            ->setParameter('exp', $value)
            ->where('u=:user')
            ->setParameter('user', $user)
            ->getQuery()->execute();
    }

    public function increaseBill(User $user, $value)
    {
        $this->createQueryBuilder('u')->update()
            ->set('u.bill', 'u.bill + :bill')
            ->setParameter('bill', $value)
            ->where('u=:user')
            ->setParameter('user', $user)
            ->getQuery()->execute();
    }

    public function spendExp(User $user, $value)
    {
        $this->createQueryBuilder('u')->update()
            ->set('u.exp_bill', 'u.exp_bill - :exp')
            ->setParameter('exp', $value)
            ->where('u=:user')
            ->setParameter('user', $user)
            ->getQuery()->execute();
    }

    public function getProfileData(User $user)
    {
        $result = [];
        $result['subscribe'] = ['enabled' => $user->getIsSubscribed()];
        $result['profile'] = $user;
        $connection = $this->getEntityManager()->getConnection();
        $settings = $connection->fetchAll('SELECT tkey, value FROM ed_users_settings WHERE user_id=:user AND tkey IN (:keys)',
            ['user' => $user->getId(), 'keys' => ['lk_user_disabled','lk_privacy_disabled','lk_balance_disabled','lk_additional_disabled']],
        ['keys' => Connection::PARAM_STR_ARRAY]);
        $result['settings'] = [];
        foreach($settings as $setting){
            $result['settings'][$setting['tkey']] = $setting['value'];
        }
        return $result;
    }

    public function increasePaidSms(User $user, $value)
    {
        $this->createQueryBuilder('u')->update()
            ->set('u.paid_sms', 'u.paid_sms + :val')
            ->setParameter('val', $value)
            ->where('u=:user')
            ->setParameter('user', $user)
            ->getQuery()->execute();
    }

    public function getAvailableDayoffs(User $user)
    {
        $total = 0 + $user->getPaidDayoffs();
        $used = $this->getEntityManager()->createQueryBuilder()
            ->from('AcmeEdelaBundle:Dayoff', 'd')
            ->select('COUNT(d) as cnt')
            ->where('d.user = :user')->setParameter('user', $user)
            ->andWhere('d.dateAt >= :date')->setParameter('date', (new \DateTime())->setTimeZone(new \DateTimeZone('+' . $user->getTimezone()))->modify('first day of this month'));

        $used = $used->getQuery()->getSingleResult(Query::HYDRATE_SCALAR);

        return $total - $used['cnt'];

    }

    public function findFriends($name, $city, $goal, User $user){

        $qb = $this->createQueryBuilder('u');

        $users = $qb->select('u.fullname, u.photo, u.id')
            ->where('u <> :user')->setParameter('user', $user);
        if ($name){
            $users->andWhere('u.fullname LIKE :name')->setParameter('name', '%' . $name  . '%');
        }

        return $users->getQuery()->getResult();
    }

    public function getLevel(User $user){
        $conn = $this->getEntityManager()->getConnection();
        $level = $conn->fetchArray('SELECT l.* FROM ed_user_levels l WHERE l.start_exp < :exp ORDER BY l.start_exp DESC LIMIT 1', ['exp' => $user->getExpTotal()]);
        return $level;
    }

}
